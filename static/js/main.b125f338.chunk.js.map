{"version":3,"sources":["IDEToolBar.js","Clicker.js","App.js","serviceWorker.js","index.js"],"names":["IDEToolBar","react_default","a","createElement","AppBar_default","style","background","Toolbar_default","Typography_default","variant","color","Component","Clicker","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","handleCode","localStorage","setItem","state","lines","setState","linesPerClick","reset","parseInt","getItem","linesPerSec","_this2","interval","setInterval","clearInterval","Button_default","onClick","App","src_IDEToolBar","Grid_default","container","spacing","justify","alignItems","paddingTop","item","md","src_Clicker","Boolean","window","location","hostname","match","ReactDOM","render","HashRouter","src_App_0","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"+PAqBeA,mLAdP,OACIC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAACC,EAAAF,EAAD,CAAQG,MAAO,CAAEC,WAAY,YACzBL,EAAAC,EAAAC,cAACI,EAAAL,EAAD,KACID,EAAAC,EAAAC,cAACK,EAAAN,EAAD,CAAYO,QAAQ,KAAKC,MAAM,WAA/B,wBANCC,8BC0CVC,cA3CX,SAAAA,EAAYC,GAAO,IAAAC,EAAA,OAAAC,OAAAC,EAAA,EAAAD,CAAAE,KAAAL,IACfE,EAAAC,OAAAG,EAAA,EAAAH,CAAAE,KAAAF,OAAAI,EAAA,EAAAJ,CAAAH,GAAAQ,KAAAH,KAAMJ,KAmBVQ,WAAa,WACTC,aAAaC,QAAQ,QAAST,EAAKU,MAAMC,OACzCX,EAAKY,SAAS,CAAED,MAAOX,EAAKU,MAAMC,MAAQX,EAAKU,MAAMG,iBAtBtCb,EAyBnBc,MAAQ,WACJN,aAAaC,QAAQ,QAAS,GAC9BT,EAAKY,SAAS,CAAED,MAAO,KAzBvBX,EAAKU,MAAQ,CACTC,MAAOI,SAASP,aAAaQ,QAAQ,WAAa,EAClDC,YAAa,EACbJ,cAAe,GALJb,mFASC,IAAAkB,EAAAf,KAChBA,KAAKgB,SAAWC,YAAY,WACxBZ,aAAaC,QAAQ,QAASS,EAAKR,MAAMC,OACzCO,EAAKN,SAAS,CAAED,MAAOO,EAAKR,MAAMC,MAAQO,EAAKR,MAAMO,eACtD,oDAIHI,cAAclB,KAAKgB,2CAcnB,OACIhC,EAAAC,EAAAC,cAAA,WACIF,EAAAC,EAAAC,cAAA,mBAAWc,KAAKO,MAAMC,OACtBxB,EAAAC,EAAAC,cAAA,yBAAiBc,KAAKO,MAAMG,eAC5B1B,EAAAC,EAAAC,cAAA,0BAAkBc,KAAKO,MAAMO,aAC7B9B,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CAAQmC,QAASpB,KAAKI,YAAtB,SACHpB,EAAAC,EAAAC,cAAA,SAAGF,EAAAC,EAAAC,cAACiC,EAAAlC,EAAD,CAAQO,QAAQ,YAAYC,MAAM,YAAY2B,QAASpB,KAAKW,OAA5D,kBAtCGjB,8BCwBP2B,2LAnBX,OACErC,EAAAC,EAAAC,cAAA,WACEF,EAAAC,EAAAC,cAAA,cACEF,EAAAC,EAAAC,cAACoC,EAAD,OAEFtC,EAAAC,EAAAC,cAACqC,EAAAtC,EAAD,CAAMuC,WAAS,EAACC,QAAS,EAAGC,QAAQ,SAASC,WAAW,UAAUvC,MAAO,CAACwC,WAAW,SACnF5C,EAAAC,EAAAC,cAACqC,EAAAtC,EAAD,CAAM4C,MAAI,EAACC,GAAI,IAEf9C,EAAAC,EAAAC,cAACqC,EAAAtC,EAAD,CAAM4C,MAAI,EAACC,GAAI,GACb9C,EAAAC,EAAAC,cAAC6C,EAAD,OAEF/C,EAAAC,EAAAC,cAACqC,EAAAtC,EAAD,CAAM4C,MAAI,EAACC,GAAI,aAbPpC,uBCMEsC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCXNC,IAASC,OAAOtD,EAAAC,EAAAC,cAACqD,EAAA,EAAD,KAAYvD,EAAAC,EAAAC,cAACsD,EAAD,OAAsBC,SAASC,eAAe,SD0HpE,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,KAAK,SAAAC,GACjCA,EAAaC","file":"static/js/main.b125f338.chunk.js","sourcesContent":["import React, { Component } from 'react';\r\nimport AppBar from '@material-ui/core/AppBar';\r\nimport Toolbar from '@material-ui/core/Toolbar';\r\nimport Typography from '@material-ui/core/Typography';\r\n\r\nclass IDEToolBar extends Component {\r\n    render() {\r\n        return (\r\n            <div >\r\n                <AppBar style={{ background: '#2b2727' }}>\r\n                    <Toolbar>\r\n                        <Typography variant=\"h6\" color=\"inherit\" >\r\n                            IT Clicker\r\n                        </Typography>\r\n                    </Toolbar>\r\n                </AppBar>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default IDEToolBar;","import React, { Component } from 'react';\r\nimport Button from '@material-ui/core/Button';\r\n\r\nclass Clicker extends Component {\r\n    constructor(props) {\r\n        super(props);\r\n        this.state = {\r\n            lines: parseInt(localStorage.getItem('lines')) || 0,\r\n            linesPerSec: 2,\r\n            linesPerClick: 1\r\n        }\r\n    }\r\n\r\n    componentDidMount() {\r\n        this.interval = setInterval(() => {\r\n            localStorage.setItem('lines', this.state.lines);\r\n            this.setState({ lines: this.state.lines + this.state.linesPerSec });\r\n        }, 1000);\r\n    }\r\n\r\n    componentWillUnmount() {\r\n        clearInterval(this.interval);\r\n    }\r\n\r\n    handleCode = () => {\r\n        localStorage.setItem('lines', this.state.lines);\r\n        this.setState({ lines: this.state.lines + this.state.linesPerClick });\r\n    }\r\n\r\n    reset = () => {\r\n        localStorage.setItem('lines', 0);\r\n        this.setState({ lines: 0 });\r\n    }\r\n\r\n    render() {\r\n        return (\r\n            <div >\r\n                <p>Lines: {this.state.lines}</p>\r\n                <p>Lines/Click: {this.state.linesPerClick}</p>\r\n                <p>Lines/Second: {this.state.linesPerSec}</p>\r\n                <p><Button onClick={this.handleCode}>Code</Button></p>\r\n                <p><Button variant=\"contained\" color=\"secondary\" onClick={this.reset}>RESET</Button></p>\r\n            </div>\r\n        );\r\n    }\r\n}\r\n\r\nexport default Clicker","import React, { Component } from 'react';\nimport IDEToolBar from './IDEToolBar.js';\nimport Clicker from './Clicker.js';\nimport Grid from '@material-ui/core/Grid';\nimport './App.css';\n\nclass App extends Component {\n  render() {\n    return (\n      <div >\n        <header>\n          <IDEToolBar />\n        </header>\n        <Grid container spacing={0} justify=\"center\" alignItems=\"stretch\" style={{paddingTop:'62px'}}>\n          <Grid item md={3}>\n          </Grid>\n          <Grid item md={7}>\n            <Clicker/>\n          </Grid>\n          <Grid item md={2}>\n          </Grid>\n        </Grid>\n      </div>\n    );\n  }\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport { HashRouter } from \"react-router-dom\"\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<HashRouter><App /></HashRouter>, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}